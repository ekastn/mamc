// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Enable referential integrity
  // referentialIntegrity = "prisma" // Uncomment if using PostgreSQL 12+
}

// Enums
enum TrackType {
  AUDIO
  MIDI
  EFFECT
}

// User model
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  avatar        String?
  bio           String?

  
  // Relations
  ownedProjects Project[]  @relation("ProjectOwner")
  memberships   ProjectMember[]
  comments      Comment[]
  versions      Version[]
  checkpoints   Checkpoint[]
  resolvedComments Comment[] @relation("ResolvedByUser")
  
  // Metadata
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  @@map("users")
}

// Project model
model Project {
  id          String    @id @default(uuid())
  title       String
  description String?
  color       String    @default("#3b82f6")
  
  // Relations
  ownerId     String
  owner       User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tracks      Track[]
  versions    Version[]
  checkpoints Checkpoint[]
  comments    Comment[]
  
  // Metadata
  isArchived  Boolean   @default(false)
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Indexes
  @@index([ownerId])
  @@index([isArchived])
  @@index([isPublic])
  @@map("projects")
}

// Project member (for collaboration)
model ProjectMember {
  id        String      @id @default(uuid())
  
  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  
  // Metadata
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  
  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("project_members")
}

// Track model
model Track {
  id          String    @id @default(uuid())
  name        String
  order       Int
  
  // Relations
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  versions    Version[]
  
  // Metadata
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  @@index([projectId])
  @@map("tracks")
}

// Version model
model Version {
  id          String    @id @default(uuid())
  name        String
  description String?
  audioUrl    String
  changeLog   String?   // Simple string describing changes in this version
  duration    Float?    // Duration in seconds
  isCurrent   Boolean   @default(false)
  
  // Relations
  trackId     String
  track       Track     @relation(fields: [trackId], references: [id])
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  // Relations to other models
  comments    Comment[]
  
  // Checkpoint associations
  checkpoints CheckpointVersion[]
  
  // Metadata
  createdAt   DateTime  @default(now()) @map("created_at")
  
  @@index([trackId])
  @@index([createdById])
  @@map("versions")
}

// Checkpoint model
model Checkpoint {
  id          String    @id @default(uuid())
  name        String
  description String?
  
  // Relations
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  // Version associations
  versions    CheckpointVersion[]
  
  // Metadata
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  
  @@index([projectId])
  @@index([createdById])
  @@map("checkpoints")
}

// Junction table for many-to-many between Checkpoint and Version
model CheckpointVersion {
  checkpoint   Checkpoint @relation(fields: [checkpointId], references: [id])
  checkpointId String
  
  version     Version    @relation(fields: [versionId], references: [id])
  versionId   String
  
  // Additional metadata about this relationship
  note        String?
  
  @@id([checkpointId, versionId])
  @@map("checkpoint_versions")
}

// Checkpoint model
define model Checkpoint {
  id          String    @id @default(uuid())
  name        String
  label       String
  description String?
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  trackStates Json      // Stores trackId -> versionId mappings
  createdAt   DateTime  @default(now())
  
  @@index([projectId])
  @@index([createdById])
}

// Comment model
model Comment {
  id          String    @id @default(uuid())
  content     String
  
  // Timeline context
  timestamp   Float     // Timestamp in seconds from the start of the track
  isPinned    Boolean   @default(false)
  
  // Relations
  versionId   String
  version     Version   @relation(fields: [versionId], references: [id])
  
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  // Threading support
  parentId    String?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  
  // Metadata
  resolved    Boolean   @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  resolvedByUser User?   @relation("ResolvedByUser", fields: [resolvedBy], references: [id])
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  @@index([versionId])
  @@index([userId])
  @@index([parentId])
  @@index([resolved])
  @@index([timestamp])
  @@map("comments")
}

// Version model
model Version {
  id          String    @id @default(uuid())
  name        String
  audioUrl    String
  duration    Float?    // Duration in seconds
  isCurrent   Boolean   @default(false)
  
  // Relations
  trackId     String
  track       Track     @relation(fields: [trackId], references: [id])
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  // Comments for this version
  comments    Comment[]
  
  createdAt   DateTime  @default(now()) @map("created_at")
  
  @@index([trackId])
  @@index([createdById])
  @@map("versions")
}
