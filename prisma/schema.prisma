// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CollaboratorRole {
  OWNER
  PRODUCER
  MIXER
  MEMBER
  MODERATOR
}

enum CommentFeelingTag {
  HAPPY
  EXCITED
  INSPIRED
  PROUD
  SATISFIED
  CALM
  FOCUSED
  NEUTRAL
  CURIOUS
  THOUGHTFUL
  TIRED
  SAD
  FRUSTRATED
  CONFUSED
  OVERWHELMED
}

enum ConflictStatus {
  OPEN
  ESCALATED
  RESOLVED
  DISMISSED
}

enum ResolutionType {
  MUTUAL_AGREEMENT
  MEDIATED_RESOLUTION
  POLICY_ENFORCEMENT
  NO_ACTION_NEEDED
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile            Profile?
  ownedProjects      Project[]             @relation("ProjectOwner")
  collaborations     ProjectCollaborator[]
  uploadedVersions   TrackVersion[]
  createdCheckpoints Checkpoint[]
  comments           TrackComment[]
  reportedConflicts  Conflict[]            @relation("ReportedConflicts")
  resolvedConflicts  ConflictResolution[]  @relation("ResolvedConflicts")

  @@map("users")
}

model Profile {
  userId              String  @id
  displayName         String
  avatarUrl           String?
  bio                 String?
  jobTitle            String?
  location            String?
  website             String?
  projectsCount       Int     @default(0)
  collaborationsCount Int     @default(0)
  socialLinks         Json    @default("{}")
  preferences         Json    @default("{}")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  projects Project[]

  @@map("tags")
}

model Project {
  id          String   @id @default(uuid())
  ownerId     String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner         User                  @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Restrict)
  collaborators ProjectCollaborator[]
  tracks        Track[]
  checkpoints   Checkpoint[]
  tags          Tag[]
  conflicts     Conflict[]

  @@map("projects")
}

model ProjectCollaborator {
  projectId String
  userId    String
  role      CollaboratorRole @default(MEMBER)
  joinedAt  DateTime         @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@map("project_collaborators")
}

model Track {
  id         String   @id @default(uuid())
  projectId  String
  name       String
  trackOrder Int?
  createdAt  DateTime @default(now())

  project  Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  versions TrackVersion[]

  @@map("tracks")
}

model TrackVersion {
  id              String   @id @default(uuid())
  trackId         String
  uploadedById    String
  versionNumber   Int
  notes           String?
  fileUrl         String
  fileSizeBytes   BigInt?
  durationSeconds Decimal?
  createdAt       DateTime @default(now())

  track             Track                    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  uploader          User                     @relation(fields: [uploadedById], references: [id], onDelete: Restrict)
  checkpointEntries CheckpointTrackVersion[]
  comments          TrackComment[]

  @@unique([trackId, versionNumber])
  @@map("track_versions")
}

model Checkpoint {
  id          String   @id @default(uuid())
  projectId   String
  createdById String
  name        String
  description String?
  createdAt   DateTime @default(now())

  project       Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator       User                     @relation(fields: [createdById], references: [id], onDelete: Restrict)
  trackVersions CheckpointTrackVersion[]

  @@map("checkpoints")
}

model CheckpointTrackVersion {
  checkpointId   String
  trackVersionId String

  checkpoint   Checkpoint   @relation(fields: [checkpointId], references: [id], onDelete: Cascade)
  trackVersion TrackVersion @relation(fields: [trackVersionId], references: [id], onDelete: Restrict)

  @@id([checkpointId, trackVersionId])
  @@map("checkpoint_track_versions")
}

model TrackComment {
  id                 String             @id @default(uuid())
  trackVersionId     String
  userId             String
  timestampInSeconds Decimal
  content            String
  parentCommentId    String?
  createdAt          DateTime           @default(now())
  feeling            CommentFeelingTag?

  trackVersion TrackVersion   @relation(fields: [trackVersionId], references: [id], onDelete: Cascade)
  author       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       TrackComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade, map: "parent_comment_id")
  replies      TrackComment[] @relation("CommentReplies")
  conflicts    Conflict[]

  @@map("track_comments")
}

model Conflict {
  id            String         @id @default(uuid())
  projectId     String
  status        ConflictStatus @default(OPEN)
  initialReason String?
  reportedById  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  project             Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reporter            User                @relation("ReportedConflicts", fields: [reportedById], references: [id], onDelete: Restrict)
  conflictingComments TrackComment[]
  resolution          ConflictResolution?

  @@map("conflicts")
}

model ConflictResolution {
  id              String         @id @default(uuid())
  conflictId      String         @unique
  moderatorId     String
  resolutionType  ResolutionType
  resolutionNotes String
  resolvedAt      DateTime       @default(now())

  conflict  Conflict @relation(fields: [conflictId], references: [id], onDelete: Cascade)
  moderator User     @relation("ResolvedConflicts", fields: [moderatorId], references: [id], onDelete: Restrict)

  @@map("conflict_resolutions")
}
